Set集合
    数据不重复
    new Set()
    set.add(value)  添加
    set.delete(value) 删除
    set.clear() 清空
    set.has(value) 是否含有某个值
    set.keys() 迭代器对象
    set.values() 迭代器对象 
    set.entries() 迭代器对象
    set.forEach((value,key,set)=>{})
    new Set
    new Set(arr)
    [...new Set(arr)] 数组去重
Map集合
    new Map()
    map.set(key,value)
    map.get(key)
    map.has(key)
    map.delete(value) 删除
    map.clear() 清空
    map.keys() 迭代器对象
    map.values() 迭代器对象 
    map.entries() 迭代器对象
    map.forEach((value,key,set)=>{})
迭代器
    iterator
    string
    Set
    Map
    Argument
    NodeList
    for-of
    map.key().next()
    指针指向下一个
    done:true 为结束条件
模块
    ES6的模块 如果在Node环境总执行 需要进行babel的转换
    导出
        export {m,n}
        export var a = 1;
        export default {}
        export default function(){}
        export default a
    导入
        import{m,n,a} from './'
        import * as obj from './'
        import test from './'
Promise
    容器 内部封装了异步操作 异步代码同步编写
    let p= new Promise(function(resolve,reject){
        $.ajax()
    })
    p.then(function(res){
        console.log(res)
    }).catch(function(err){
        console.log(err)
    })
    Promise.resolve(); 将p转成Promise对象 并将Promise对象转成resolved状态
    Promise.reject()
    Promise.all([[p1,p2,p3]) 如果p1 p2 p3 都执行成功 ？  其他情况 ？
    Promise.race([p1,p2,p3]) // 谁执行的快 就用谁的结果
    p.finally(()=>{})

类 语法糖 --构造函数 --原型对象
继承 extends
    class Animal{
        //构造器
        constructor(name,age){
            //实例属性
            this.name = name;
            this.age = age
        }
        //实例的方法
        sayName(){
            console.log(this.name)
        }
        //static 类方法 静态方法 只能类本身调用
        static say(){
            console.log('say')
        }
    }
    //静态属性 在类外部用类名.属性名声明的属性
    Animal.gender = '男'

类继承
    Dog  Animal
    //经典继承
    function Animal(name, age){}
    function Dog(name,age,color){
        Animal.call(this,name,age)
    }
    Dog.prototype = new Animal();

    1.extends关键字
    2.属性的继承
    3.方法的继承

    class Animal{}
    class Dog extends Animal{}
    //实现了静态方法 静态属性  实例方法的继承
    //实例属性的继承需要手动写 在Dog类的构造器中调用父类的构造器 传递参数

    //继承有两条线
    子类对象继承父类对象
    子类的原型对象继承父类的原型对象

    父类的静态属性和静态方法，子类可以调用 Dog继承Animal中的属性和静态方法
    父类中写的实例方法 在子类的原型中可以获取到 子类实例可以调用